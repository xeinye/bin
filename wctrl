#!/bin/sh

case "$1" in
   "-f") # fullscreen, expected input: wid
        FSFILE=${FSFILE:-/tmp/fsfile}
        wid=$2
        test -f $FSFILE && wtp $(cat $FSFILE)
        if test -f $FSFILE && grep -q $wid $FSFILE; then
            rm -f $FSFILE
        else
        wattr xywhi $wid > $FSFILE
        chwb -s 0 $wid
        wtp $(wattr xywh `lsw -r`) $wid
        fi
        $(basename $0) -fo $2
		
    ;;

    "-fo") #focus, expected input: wid
    shift
    BW=${BW:-2}                    # border width
    ACTIVE=${ACTIVE:-0xffffff}     # active border color
    INACTIVE=${INACTIVE:-0x333333} # inactive border color
    
    CUR=$(pfw)
    
    usage() {
        echo "usage: $(basename $0) <next|prev|wid>"
        exit 1
    }
    
    setborder() {
        ROOT=$(lsw -r)
        wattr $2 || return
        test "$(wattr xywh $2)" = "$(wattr xywh $ROOT)" && return
        case $1 in
            active)   chwb -s $BW -c $ACTIVE $2 ;;
            inactive) chwb -s $BW -c $INACTIVE $2 ;;
        esac
    }
    
    case $1 in
        next) wid=$(lsw|grep -v $CUR|sed '1 p;d') ;;
        prev) wid=$(lsw|grep -v $CUR|sed '$ p;d') ;;
        0x*) wattr $1 && wid=$1 ;;
        *) usage ;;
    esac
    
    test -z "$wid" && echo "$(basename $0): can't find a window to focus" >&2 && exit 1
    
    setborder inactive $CUR # set inactive border on current window
    setborder active $wid   # activate the new window
    chwso -r $wid           # put it on top of the stack
    wtf $wid                # set focus on it
    wmp -a $(wattr xy $wid) # move the mouse cursor to
    wmp -r $(wattr wh $wid) # .. its bottom right corner
    ;;


   "-q") # kill window
       killw $2
    ;;
   "-c") # centralize
       WID=$(pfw)
       WW=$(wattr w $WID)
       WH=$(wattr h $WID)
       ROOT=$(lsw -r)
       SW=$(wattr w $ROOT)
       SH=$(wattr h $ROOT)
       wtp $(((SW - WW)/2)) $(((SH - WH)/2)) $WW $WH $WID
       ;;

   "-cy") # cycle between windows, expected input: prev, next or wid
	shift
	BW=${BW:-2}                    # border width
	ACTIVE=${ACTIVE:-0xffffff}     # active border color
	INACTIVE=${INACTIVE:-0x323232} # inactive border color
	
	# get current window id
	CUR=$(pfw || echo NONE)
	
	usage() {
	    echo "usage: $(basename $0) <next|prev|wid>" >&2
	    exit 1
	}
	
	setborder() {
	    ROOT=$(lsw -r)
	
	    # check that window exists and shouldn't be ignored
	    wattr $2 || return
	    wattr o $2 && return
	
	    # do not modify border of fullscreen windows
	    test "$(wattr xywh $2)" = "$(wattr xywh $ROOT)" && return
	
	    case $1 in
	        active)
	            chwb -s $BW -c $ACTIVE $2
	            #chwb2 -O $ACTIVE -I 000000 -i 4 -o 4 $2
	            ;;
	        inactive)
	            chwb -s $BW -c $INACTIVE $2
	            #chwb2 -O $INACTIVE -I 000000 -i 4 -o 4 $2
	            ;;
	    esac
	}
	
	case $1 in
	    next)
	        wid=$(lsw|grep -v $CUR|sed '1 p;d')
	        ;;
	    prev)
	        wid=$(lsw|grep -v $CUR|sed '$ p;d')
	        ;;
	    0x*)
	        wattr $1 && wid=$1
	        #test "$wid" = "$CUR" && exit;;
		;;
	    *) usage ;;
	esac
	
	# exit if we can't find another window to focus
	test -z "$wid" && { echo "$(basename $0): no window to focus" >&2; exit 1; }
	
	wtf $wid                # set focus on it
	chwso -r $wid           # raise windows
	setborder inactive $CUR # set inactive border on current window
	setborder active $wid   # activate the new window
	chwb -s $BW $wid
	
	exit 0
esac
